{
    "codes": [
        {
            "code": "word",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are a word, that is, are surrounded by whitespace and/or punctuation."
        },
        {
            "code": "syllable",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "As its name indicates, this opcode defines a 'syllable' which must be represented by exactly the dot patterns given. Contractions may not cross the boundaries of this 'syllable' either from left or right. The character string defined by this opcode need not be a lexical syllable, though it usually will be. The equal sign in the following example means that the the default representation for each character within the sequence is to be used"
        },
        {
            "code": "joinword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are a word which is followed by whitespace and a letter. In addition remove the whitespace. For example, en-us-g2.ctb has joinword to 235. This means that if the word ‘to’ is followed by another word the contraction is to be used and the space is to be omitted. If these conditions are not met, the word is translated according to any other opcodes that may apply to it."
        },
        {
            "code": "lowword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are a word preceded and followed by whitespace. No punctuation either before or after the word is allowed. The term lowword derives from the fact that in English these contractions are written in the lower part of the cell."
        },
        {
            "code": "contraction",
            "fields": [
                "characters"
            ],
            "description": "If you look at en-us-g2.ctb you will see that some words are actually contracted into some of their own letters. A famous example among braille transcribers is ‘also’, which is contracted as ‘al’. But this is also the name of a person. To take another example, ‘altogether’ is contracted as ‘alt’, but this is the abbreviation for the alternate key on a computer keyboard. Similarly ‘could’ is contracted into ‘cd’, but this is the abbreviation for compact disk. To prevent confusion in such cases, the letter sign is placed before such letter combinations when they actually are abbreviations, not contractions. The contraction opcode tells the translator to do this."
        },
        {
            "code": "sufword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are either a word or at the beginning of a word."
        },
        {
            "code": "prfword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are either a word or at the end of a word."
        },
        {
            "code": "begword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are at the beginning of a word."
        },
        {
            "code": "begmidword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are either at the beginning or in the middle of a word."
        },
        {
            "code": "midword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are in the middle of a word."
        },
        {
            "code": "midendword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are either in the middle or at the end of a word."
        },
        {
            "code": "endword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are at the end of a word."
        },
        {
            "code": "partword",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if the characters are anywhere in a word, that is, if they are proceeded or followed by a letter."
        },
        {
            "code": "exactdots",
            "fields": [
                "@dots"
            ],
            "description": "Note that the operand must begin with an at sign (‘@’). The dot pattern following it is evaluated for validity. If it is valid, whenever an at sign followed by this dot pattern appears in the source document it is replaced by the characters corresponding to the dot pattern in the output. This opcode is intended for use in liblouisutdml semantic-action files to specify exact dot patterns, as in mathematical codes."
        },
        {
            "code": "prepunc",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are part of punctuation at the beginning of a word."
        },
        {
            "code": "postpunc",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are part of punctuation at the end of a word."
        },
        {
            "code": "begnum",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are at the beginning of a number, that is, before all its digits."
        },
        {
            "code": "midnum",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are in the middle of a number."
        },
        {
            "code": "endnum",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern if they are at the end of a number."
        },
        {
            "code": "joinnum",
            "fields": [
                "characters",
                "dots"
            ],
            "description": "Replace the characters with the dot pattern. In addition, if whitespace and a number follows omit the whitespace. This opcode can be used to join currency symbols to numbers."
        },
        {
            "code": "space",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Whitespace characters such as blank and tab"
        },
        {
            "code": "digit",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Numeric characters"
        },
        {
            "code": "letter",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Both uppercase and lowercase alphabetic characters"
        },
        {
            "code": "lowercase",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Lowercase alphabetic characters"
        },
        {
            "code": "uppercase",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Uppercase alphabetic characters"
        },
        {
            "code": "punctuation",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Punctuation marks"
        },
        {
            "code": "sign",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Signs such as percent ('%')"
        },
        {
            "code": "math",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Mathematical symbols"
        },
        {
            "code": "litdigit",
            "fields": [
                "unicode",
                "dots"
            ],
            "description": "Literary digit"
        },
        {
            "code": "attribute",
            "fields": [
                "name",
                "characters"
            ],
            "description": "Add characters to a character class. The class may be one of the predefined classes listed above, a user-defined class previously created with this opcode, or a new one. The name operand must contain only letters (a-z and A-Z, case matters). For historical reasons and to support the match opcode (see match) it can also be a number between 0 and 7. The characters operand must be specified as a string. Each character in the string, as well as its dot counterpart if it occupies a single cell, is added to the character class."
        }
    ]
}